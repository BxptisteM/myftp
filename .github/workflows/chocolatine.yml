name : chocolatine
on: [push, pull_request]
env:
  REPO_LINK: "git@github.com:EpitechPromo2027/B-NWP-400-NAN-4-1-myftp-baptiste.moreau.git"
  EXECUTABLES: "myftp"
jobs:
  check_coding_style:
    name: check_coding_style
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run:  |
              check.sh $(pwd) $(pwd)
      - run : |
              cat coding-style-reports.log | while read line
              do
                  error_type=$(echo "$line" | cut -d ' ' -f 2 | cut -d ':' -f 1)
                  file=$(echo "$line" | cut -d ':' -f 1)
                  line_number=$(echo "$line" | cut -d ':' -f 2)
                  error_code=$(echo "$line" | cut -d ':' -f 4)
                  error_title=$(echo "$error_type coding style error")
                  echo "::error title=$error_title,file=$file,line=$line_number::$error_code"
              done;

  check_program_compilation:
    name: check_program_compilation
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          timeout-minutes: 2
      - name: Make
        run: |
              make
      - name: Check EXECUTABLES
        run: |
              IFS=','
              read -a executables <<< ${{env.EXECUTABLES}}
              for binaries in "${executables[@]}";
              do
                if [ ! -x $binaries ]; then
                    exit 1
                fi
              done
      - name: Clean
        run: |
          make clean

  # run_tests:
  #   name: run_tests
  #   runs-on: ubuntu-latest
  #   container: epitechcontent/epitest-docker
  #   needs: check_program_compilation
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Tests
  #       timeout-minutes: 2
  #       run:  |
  #         make tests_run

  # check_for_memory_leaks:
  #   name: run_valgrind
  #   runs-on: ubuntu-latest
  #   container: epitechcontent/epitest-docker
  #   needs: run_tests
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Valgrind
  #       run: |
  #         valgrind make tests_run >> valgrind.log 2>&1
  #         cat valgrind.log | grep "ERROR SUMMARY: 0 errors from 0 contexts" || exit 1

  push_to_epitech_repo:
    runs-on: ubuntu-latest
    needs: [check_coding_style, check_program_compilation]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{env.REPO_LINK}}
          ssh_private_key:
            ${{secrets.SSH_PRIVATE_KEY}}